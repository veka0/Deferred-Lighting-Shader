#include "fragmentHeader.h"
#include "uniformWorldConstants.h"
#include "uniformInterFrameConstants.h"
precision highp float;
#include "quadSwizzle.glsl"

// Choose supported framebuffer color sampling extension.
#ifdef GL_EXT_shader_framebuffer_fetch
	#define gl_LastFragColorARM finalColor
	inout vec4 finalColor;
#else
	out vec4 finalColor;
#endif

#line 16

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;

// Settings
const float specShine = 10.0;
const float specIntensity= 0.1;
const float fogIntensity = 0.02;

const float scatterDiffuse = 0.5;
const float scatterShine = 50.0;
const float scatterDensity = 0.3;
const float scatterThickness = 0.1;

const float ditherSpread = 20.0/255.0;

const float phi = 0.618033988749894848204;


flat in highp vec4 color;
in highp vec3 position;
in highp vec3 origin;

float calcFogLight(float fragDist, vec3 dir) {
	float d = dot(dir, origin.xyz);
	vec3 orthLvec = origin.xyz - dir * d;
	
	float h = length(orthLvec);
	float oL = length(origin.xyz - orthLvec)*sign(d);

	return (atan((fragDist-oL)/h) - atan(-oL/h))/h;
}


void main()
{
	// Don't shade the sky in non-volumetric mode.
	#ifndef VOLUMETRIC_FOG
		float depth = gl_LastFragDepthARM;
		if (depth >= 1.0) { discard; }
	#endif
	
	
	// Average shadow presence from 3 pixels and discard if completely in shadow.
	#ifdef SHADOWS
		vec3 swizzlePos = quadSwizzlePos();
		float shadow = float((gl_LastFragStencilARM & 8) == 0)/3.0;
		shadow = quadSwizzle0(shadow, swizzlePos.x) + quadSwizzle1(shadow, swizzlePos.x) + quadSwizzle2(shadow, swizzlePos.yz);
	
		if (shadow == 0.0) { discard; }
	#endif

	
	// Compute N, L and viewPos.
	#ifdef VOLUMETRIC_FOG
		float viewZ = PROJ[3][2] / ((gl_LastFragDepthARM * 2.0 - 1.0) + PROJ[2][2]);
	#else
		float viewZ = PROJ[3][2] / ((depth * 2.0 - 1.0) + PROJ[2][2]);
	#endif
	
	vec3 viewPos = viewZ * position / position.z;
	vec3 N = normalize(cross(dFdy(viewPos), dFdx(viewPos)));
	
	vec3 L = origin - viewPos;
	float dist = length(L);
	L /= dist;

	
	// Discard based on computed diffuse value, light and material properties.
	float diffuse = dot(N, L);
	#ifdef SHADOWS
		if (diffuse <= 0.0) { discard; }
	#else
		bool scatter = (gl_LastFragStencilARM & 4) != 0;
		#ifndef VOLUMETRIC_FOG
			if (diffuse <= 0.0 && !scatter) { discard; }
		#endif
	#endif // SHADOWS
	
	
	// Compute specular and attenuation.
	float viewLen = length(viewPos);
	vec3 viewVec = -viewPos/viewLen;
	
	vec3 h = normalize(L+viewVec);
	
	float specular = float((gl_LastFragStencilARM & 8) == 0)*specIntensity*pow(max(dot(N, h), 0.0), specShine);
	float attenuation = 1.0/(dist*dist);
	
	
	// Unpack albedo and HDR color buffers.
	#ifndef SHADOWS
		vec3 swizzlePos = quadSwizzlePos();
	#endif
	vec3 col = gl_LastFragColorARM.rgb;
	
	vec3 albedo = col.bbb;
	
	vec3 lighting = 2.0*(col.ggg + round(31.0*col.rrr/2.0));
	
	
	// Convert the sky to HDR if it hasn't been converted yet.
	float condition = (gl_LastFragDepthARM >= 1.0) && ((gl_LastFragStencilARM & 2) == 0) ? 1.0 : 0.0;
	albedo = mix(albedo, col, vec3(quadSwizzle0(condition, swizzlePos.x), quadSwizzle1(condition, swizzlePos.x), quadSwizzle2(condition, swizzlePos.yz) ));
	lighting = mix(lighting, col, vec3(quadSwizzle0(condition, swizzlePos.x), quadSwizzle1(condition, swizzlePos.x), quadSwizzle2(condition, swizzlePos.yz) ));
	
	
	// Compute scattering.
	#ifndef SHADOWS
		vec3 sc = pow(max(dot(-viewVec, L), 0.0), scatterShine) * pow(albedo, vec3(scatterDensity*tan(acos( abs(diffuse) ))) + scatterThickness);
	#endif
	
	// Add light source contribution to pixel's color.
	#ifdef SHADOWS
		lighting += shadow * attenuation * ( step(0.0, diffuse)*(diffuse*albedo + specular) ) * color.rgb;
	#else
		#ifdef VOLUMETRIC_FOG
			float fog = fogIntensity*calcFogLight(viewLen, normalize(position.xyz));
			lighting += (attenuation * (float(scatter)*sc + (scatter && diffuse < 0.0 ? -scatterDiffuse : step(0.0, diffuse))*diffuse*albedo + step(0.0, diffuse)*specular) + fog) * color.rgb;
		#else
			lighting += attenuation * (float(scatter)*sc + (scatter && diffuse < 0.0 ? -scatterDiffuse : step(0.0, diffuse))*diffuse*albedo + step(0.0, diffuse)*specular) * color.rgb;
		#endif
	#endif
	

	// Blue noise dithering (animated in time, different for each light).
	vec3 dither = ditherSpread * (fract(texture(TEXTURE_0, floor(0.5*gl_FragCoord.xy)/64.0).rgb+phi*(10.0*fract(TOTAL_REAL_WORLD_TIME)+color.a))-0.5);

	
	// Pack albedo and updated HDR color back into the framebuffer.
	vec3 hdrCol1 = mod(31.0*lighting, 64.0)/63.0+dither;
	vec3 hdrCol2 = 2.0*floor(31.0*lighting/64.0)/31.0;
	
	int index = quadSwizzleIndex(swizzlePos);
	
	finalColor = index == 0 ? vec4(hdrCol2.r, hdrCol1.r, albedo.r, 1.0) : index == 1 ? vec4(hdrCol2.g, hdrCol1.g, albedo.g, 1.0) : vec4(hdrCol2.b, hdrCol1.b, albedo.b, 1.0);
}
