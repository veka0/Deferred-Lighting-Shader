#include "fragmentHeader.h"
#include "uniformWorldConstants.h"
#include "uniformPerFrameConstants.h"
#include "uniformInterFrameConstants.h"
precision highp float;
#include "quadSwizzle.glsl"
#line 5


// Choose supported framebuffer color sampling extension.
#ifdef GL_EXT_shader_framebuffer_fetch
	#define gl_LastFragColorARM finalColor
	inout vec4 finalColor;
#else
	out vec4 finalColor;
#endif

layout(binding=0) uniform sampler2D TEXTURE_0;

// Settings
const float fogIntensity = 0.02;
const float ditherSpread = 20.0/255.0;

const float phi = 0.618033988749894848204;


flat in highp vec4 color;
in highp vec3 position;
in highp vec3 origin;

float calcFogLight(float fragDist, vec3 dir) {
	float d = dot(dir, origin.xyz);
	vec3 orthLvec = origin.xyz - dir * d;
	
	float h = length(orthLvec);
	float oL = length(origin.xyz - orthLvec)*sign(d);

	return (atan((fragDist-oL)/h) - atan(-oL/h))/h;
}


void main()
{
	float viewZ = PROJ[3][2] / ((gl_LastFragDepthARM * 2.0 - 1.0) + PROJ[2][2]);
	
	vec3 viewPos = viewZ * position / position.z;
	
	float viewLen = length(viewPos);
	
	
	// Unpack albedo and HDR color buffers.
	vec3 swizzlePos = quadSwizzlePos();
	
	vec3 col = gl_LastFragColorARM.rgb;
	
	vec3 col0 = quadSwizzle0(col, swizzlePos.x);
	vec3 col1 = quadSwizzle1(col, swizzlePos.x);
	vec3 col2 = quadSwizzle2(col, swizzlePos.yz);
	
	vec3 albedo = vec3(col0.b, col1.b, col2.b);
	
	vec3 lighting = 2.0*vec3(col0.g, col1.g, col2.g) + 2.0*round(31.0*vec3(col0.r, col1.r, col2.r)/2.0);
	
	
	// Convert the sky to HDR if it hasn't been converted yet.
	float condition = (gl_LastFragDepthARM >= 1.0) && ((gl_LastFragStencilARM & 2) == 0) ? 1.0 : 0.0;
	albedo = mix(albedo, vec3(col0.r, col1.g, col2.b), vec3(quadSwizzle0(condition, swizzlePos.x), quadSwizzle1(condition, swizzlePos.x), quadSwizzle2(condition, swizzlePos.yz) ));
	lighting = mix(lighting, vec3(col0.r, col1.g, col2.b), vec3(quadSwizzle0(condition, swizzlePos.x), quadSwizzle1(condition, swizzlePos.x), quadSwizzle2(condition, swizzlePos.yz) ));
	
	
	float fog = fogIntensity*calcFogLight(viewLen, normalize(position.xyz));
	lighting += color.rgb*fog;
	
	
	// Use lighting from a single fragment across the quad, to avoid chromatic artefacts.
	lighting = quadSwizzle0(lighting, swizzlePos.x);
	

	// Blue noise dithering (animated in time, different for each light).
	vec3 dither = ditherSpread * (fract(texture(TEXTURE_0, floor(0.5*gl_FragCoord.xy)/64.0).rgb+phi*(10.0*fract(TIME)+color.a+0.5))-0.5);

	
	// Pack updated HDR color and albedo back into the framebuffer.
	vec3 hdrCol1 = mod(31.0*lighting, 64.0)/63.0+dither;
	vec3 hdrCol2 = 2.0*floor(31.0*lighting/64.0)/31.0;
	
	int index = quadSwizzleIndex(swizzlePos);
	
	finalColor = index == 0 ? vec4(hdrCol2.r, hdrCol1.r, albedo.r, 1.0) : index == 1 ? vec4(hdrCol2.g, hdrCol1.g, albedo.g, 1.0) : vec4(hdrCol2.b, hdrCol1.b, albedo.b, 1.0);
	
}
